import logging
from flask import Flask, request, jsonify
import requests
import time
import envparse
from threading import Thread, Event, Lock
from datetime import datetime, timedelta, timezone
import telebot
from queue import Queue
from hashlib import md5
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class Config:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    def __init__(self):
        envparse.env.read_envfile()
        # Mattermost
        self.mattermost_server_url = envparse.env.str("MATTERMOST_SERVER_URL")
        self.channel_id = envparse.env.str("MATTERMOST_CHANNEL_ID")
        self.mattermost_bearer_token = envparse.env.str("MATTERMOST_BEARER_TOKEN")
        self.bot_user_id = envparse.env.str("MATTERMOST_BOT_USER_ID")
        
        # Telegram
        self.telegram_bot_token = envparse.env.str("TELEGRAM_BOT_TOKEN")
        self.telegram_chat_id = envparse.env.str("TELEGRAM_CHAT_ID")
        self.manager_chat_id = envparse.env.str("MANAGER_CHAT_ID")
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
        self.ekb_tz = pytz.timezone('Asia/Yekaterinburg')
        self.msk_tz = pytz.timezone('Europe/Moscow')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        self.non_working_hours = {
            'ekb': {'start': 6, 'end': 10},  # 6-8 —É—Ç—Ä–∞ –ï–ö–ë
            'msk': {'start': 6, 'end': 10}   # 8-10 —É—Ç—Ä–∞ –ú–°–ö
        }
        
        # –í–Ω–µ–¥—Ä–µ–Ω—Ü—ã
        self.implementers = {
            'ekb': ['user1_id', 'user2_id'],
            'msk': ['user3_id', 'user4_id']
        }

class MessageProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
    def __init__(self, config: Config):
        self.config = config
        self.telegram_bot = telebot.TeleBot(config.telegram_bot_token)
        self.message_queue = Queue(maxsize=100)
        self.processed_messages = set()
        self.pending_responses = {}
        self.lock = Lock()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        self._setup_telegram_handlers()
    
    def _setup_telegram_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ Telegram"""
        @self.telegram_bot.message_handler(func=lambda message: True)
        def handle_message(message):
            if message.reply_to_message and message.reply_to_message.message_id in self.pending_responses:
                original_msg = self.pending_responses[message.reply_to_message.message_id]
                self._send_to_mattermost(
                    original_msg['channel_id'],
                    f"–û—Ç–≤–µ—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω—Ü–∞: {message.text}",
                    original_msg['post_id']
                )
                self.telegram_bot.send_message(
                    message.chat.id,
                    "–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Mattermost!",
                    reply_to_message_id=message.message_id
                )
    
    def _get_message_hash(self, message: str, channel_id: str, post_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return md5(f"{message}-{channel_id}-{post_id}".encode()).hexdigest()
    
    def _is_non_working_time(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –Ω–µ—Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö"""
        now_ekb = datetime.now(self.config.ekb_tz)
        now_msk = datetime.now(self.config.msk_tz)
        
        ekb_hour = now_ekb.hour
        msk_hour = now_msk.hour
        
        ekb_time = self.config.non_working_hours['ekb']
        msk_time = self.config.non_working_hours['msk']
        
        return (ekb_time['start'] <= ekb_hour < ekb_time['end'] or 
                msk_time['start'] <= msk_hour < msk_time['end'])
    
    def _get_implementers(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–Ω–µ–¥—Ä–µ–Ω—Ü–µ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        now_ekb = datetime.now(self.config.ekb_tz).hour
        now_msk = datetime.now(self.config.msk_tz).hour
        
        if self.config.non_working_hours['ekb']['start'] <= now_ekb < self.config.non_working_hours['ekb']['end']:
            return self.config.implementers['ekb']
        else:
            return self.config.implementers['msk']
    
    def process_message(self, message: str, channel_id: str, post_id: str, user_id: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message_hash = self._get_message_hash(message, channel_id, post_id)
        
        with self.lock:
            if message_hash in self.processed_messages:
                return
            self.processed_messages.add(message_hash)
        
        if self._is_non_working_time():
            self._send_to_mattermost(
                channel_id,
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –µ–≥–æ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (—Å 8 –¥–æ 18).",
                post_id
            )
            return
        
        self.message_queue.put({
            'message': message,
            'channel_id': channel_id,
            'post_id': post_id,
            'user_id': user_id,
            'timestamp': time.time()
        })
    
    def _get_user_info(self, user_id: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Mattermost"""
        headers = {
            'Authorization': f'Bearer {self.config.mattermost_bearer_token}',
            'Content-Type': 'application/json'
        }
        try:
            response = requests.get(
                f"{self.config.mattermost_server_url}/api/v4/users/{user_id}",
                headers=headers,
                timeout=5
            )
            if response.status_code == 200:
                return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {str(e)}")
        
        return {'username': user_id}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

    def _send_to_mattermost(self, channel_id: str, message: str, post_id: str = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Mattermost"""
        headers = {
            'Authorization': f'Bearer {self.config.mattermost_bearer_token}',
            'Content-Type': 'application/json'
        }
        payload = {
            "channel_id": channel_id,
            "message": message,
        }
        
        if post_id and len(post_id) == 26:
            payload["root_id"] = post_id
            
        try:
            response = requests.post(
                f"{self.config.mattermost_server_url}/api/v4/posts",
                headers=headers,
                json=payload,
                timeout=10
            )
            if response.status_code != 201:
                logger.error(f"Mattermost error: {response.text}")
        except Exception as e:
            logger.error(f"Mattermost send error: {str(e)}")
    
    def _format_mattermost_link(self, post_id: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Mattermost"""
        if not post_id or len(post_id) != 26:
            return "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ post_id
        clean_post_id = post_id.strip()
        return f"{self.config.mattermost_server_url}/kontur/pl/{clean_post_id}"

    def _send_to_telegram(self, message_data: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏"""
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
        if message_data['user_id'] == self.config.bot_user_id:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        user_info = self._get_user_info(message_data['user_id'])
        display_name = self._get_display_name(user_info)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        mm_link = self._format_mattermost_link(message_data['post_id'])
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"üö® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤–Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è!\n\n"
            f"–û—Ç: <b>{display_name}</b>\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message_data['message']}\n\n"
            f"<a href='{mm_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ Mattermost</a>"
        )

        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton(
                text="–û—Ç–≤–µ—Ç–∏—Ç—å –≤ Mattermost",
                url=mm_link
            ))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_msg = self.telegram_bot.send_message(
                self.config.telegram_chat_id,
                message_text,
                parse_mode='HTML',
                reply_markup=markup,
                disable_web_page_preview=True
            )
            
            self.pending_responses[sent_msg.message_id] = message_data
            Thread(target=self._check_response, args=(message_data,)).start()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")

    def _get_display_name(self, user_info: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        username = user_info.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        first_name = user_info.get('first_name', '')
        last_name = user_info.get('last_name', '')
        
        if first_name or last_name:
            return f"{first_name} {last_name}".strip()
        return username
    
    def _check_response(self, message_data: dict):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        time.sleep(3600)  # –ñ–¥–µ–º 1 —á–∞—Å
        
        with self.lock:
            if message_data['post_id'] not in [msg['post_id'] for msg in self.pending_responses.values()]:
                return
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –±—ã–ª–æ, —É–≤–µ–¥–æ–º–ª—è–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        self._notify_manager(message_data)
    
    def _notify_manager(self, message_data: dict):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        message = f"‚ö†Ô∏è –ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message_data['user_id']}:\n\n{message_data['message']}"
        
        try:
            self.telegram_bot.send_message(
                self.config.manager_chat_id,
                message,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"Manager notification error: {str(e)}")
    
    def start_processing(self, stop_event: Event):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while not stop_event.is_set():
            try:
                message_data = self.message_queue.get(timeout=1)
                self._send_to_telegram(message_data)
                self.message_queue.task_done()
            except Exception as e:
                continue

class MattermostPoller:
    """–ü–æ–ª–ª–∏–Ω–≥ Mattermost –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    def __init__(self, config: Config, processor: MessageProcessor):
        self.config = config
        self.processor = processor
        self.last_post_time = datetime.now(timezone.utc) - timedelta(minutes=5)
    
    def poll(self, stop_event: Event):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª–ª–∏–Ω–≥–∞"""
        headers = {
            'Authorization': f'Bearer {self.config.mattermost_bearer_token}',
            'Content-Type': 'application/json'
        }
        
        while not stop_event.is_set():
            try:
                response = requests.get(
                    f"{self.config.mattermost_server_url}/api/v4/channels/{self.config.channel_id}/posts",
                    headers=headers,
                    params={'since': int(self.last_post_time.timestamp() * 1000)},
                    timeout=15
                )
                
                if response.status_code == 200:
                    self._process_messages(response.json())
                else:
                    logger.error(f"Mattermost poll error: {response.text}")
                
                time.sleep(5)
            except Exception as e:
                logger.error(f"Mattermost poll exception: {str(e)}")
                time.sleep(10)
    
    def _process_messages(self, messages: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        for post_id in messages.get('order', []):
            post = messages['posts'][post_id]
            
            if post['user_id'] == self.config.bot_user_id:
                continue
                
            self.processor.process_message(
                post['message'],
                self.config.channel_id,
                post_id,
                post['user_id']
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            create_at = post.get('create_at', 0) / 1000
            self.last_post_time = datetime.fromtimestamp(create_at, timezone.utc)

class WebhookServer:
    """–°–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤"""
    def __init__(self, config: Config, processor: MessageProcessor):
        self.app = Flask(__name__)
        self.config = config
        self.processor = processor
        self._setup_routes()
    
    def _setup_routes(self):
        @self.app.route('/mattermost_webhook', methods=['POST'])
        def webhook():
            data = request.json
            if data:
                post = data.get('post', {})
                if post and post.get('user_id') != self.config.bot_user_id:
                    self.processor.process_message(
                        post['message'],
                        data['channel_id'],
                        post['id'],
                        post['user_id']
                    )
            return jsonify({'status': 'ok'})
    
    def run(self, stop_event: Event):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        while not stop_event.is_set():
            try:
                self.app.run(port=5000, threaded=True)
            except Exception as e:
                logger.error(f"Webhook server error: {str(e)}")
                time.sleep(5)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    stop_event = Event()
    
    try:
        config = Config()
        processor = MessageProcessor(config)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        Thread(target=processor.start_processing, args=(stop_event,), daemon=True).start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ Mattermost
        poller = MattermostPoller(config, processor)
        Thread(target=poller.poll, args=(stop_event,), daemon=True).start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä
        webhook_server = WebhookServer(config, processor)
        Thread(target=webhook_server.run, args=(stop_event,), daemon=True).start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
        Thread(target=processor.telegram_bot.infinity_polling, daemon=True).start()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while not stop_event.is_set():
            time.sleep(1)
            
    except KeyboardInterrupt:
        logger.info("Shutting down...")
        stop_event.set()
    except Exception as e:
        logger.error(f"Fatal error: {str(e)}")
        stop_event.set()

if __name__ == '__main__':
    main()